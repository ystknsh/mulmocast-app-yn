name: 'Auto Translation'

on:
  push:
    paths:
      - 'docs/**/*.md'
      - 'README.md'
      - '*.md'
    branches:
      - 'main'
  workflow_dispatch:
    inputs:
      target_file:
        description: 'Target file for translation (if empty, auto-detect)'
        required: false
        type: string
      force_retranslate:
        description: 'Force update existing translation'
        required: false
        type: boolean
        default: false

concurrency:
  group: 'translation-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  translate:
    runs-on: 'ubuntu-latest'
    timeout-minutes: 10
    permissions:
      contents: 'write'
      pull-requests: 'write'
      actions: 'write'
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4'
        with:
          fetch-depth: 2

      # Step 1: „Éï„Ç°„Ç§„É´„ÅÆÊ§úÂá∫„Å®Êó¢Â≠òÁøªË®≥„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
      - name: 'Step 1: Detect Files and Check Existing Translations'
        id: 'detect_files'
        run: |-
          echo "üîç Detecting target files..."
          
          # „Çø„Éº„Ç≤„ÉÉ„Éà„Éï„Ç°„Ç§„É´„ÅÆÊ§úÂá∫
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ inputs.target_file }}" ]; then
              # ÁâπÂÆö„Éï„Ç°„Ç§„É´„ÅåÊåáÂÆö„Åï„Çå„ÅüÂ†¥Âêà
              TARGET_FILES="${{ inputs.target_file }}"
            else
              # ÊâãÂãïÂÆüË°å„ÅßÊåáÂÆö„Å™„Åó„ÅÆÂ†¥Âêà„ÄÅ„Åô„Åπ„Å¶„ÅÆMD„Éï„Ç°„Ç§„É´„Çí„ÉÅ„Çß„ÉÉ„ÇØ
              TARGET_FILES=$(find docs -name "*.md" -type f | grep -v "_en.md" | grep -v "_ja.md" || true)
              if [ -z "$TARGET_FILES" ]; then
                TARGET_FILES=$(find . -maxdepth 1 -name "*.md" -type f | grep -v "_en.md" | grep -v "_ja.md" || true)
              fi
            fi
          else
            # PushÊôÇ„ÅØÂ§âÊõ¥„Åï„Çå„Åü„Éï„Ç°„Ç§„É´„ÅÆ„Åø
            TARGET_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(md)$' | grep -E '^(docs|content|README)' || true)
          fi
          
          echo "üìã Target files: $TARGET_FILES"
          
          # Âá¶ÁêÜÂØæË±°„Éï„Ç°„Ç§„É´„ÅÆ„É™„Çπ„Éà‰ΩúÊàê
          echo "files_to_process=" > process_list.txt
          
          for file in $TARGET_FILES; do
            if [ -f "$file" ]; then
              # „Éï„Ç°„Ç§„É´Âêç„Åã„ÇâÊó¢Â≠ò„ÅÆÁøªË®≥„Çµ„Éï„Ç£„ÉÉ„ÇØ„Çπ„ÇíÈô§Âéª
              base_file="${file%_en.md}"
              base_file="${base_file%_ja.md}"
              
              # Êó¢„Å´ÁøªË®≥„Çµ„Éï„Ç£„ÉÉ„ÇØ„Çπ„Åå„Å§„ÅÑ„Å¶„ÅÑ„Å™„ÅÑÂÖÉ„Éï„Ç°„Ç§„É´„ÅÆ„ÅøÂá¶ÁêÜ
              if [ "$base_file.md" = "$file" ]; then
                echo "‚úÖ Found source file: $file"
                
                # Êó¢Â≠òÁøªË®≥„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
                has_en="false"
                has_ja="false"
                [ -f "${base_file}_en.md" ] && has_en="true"
                [ -f "${base_file}_ja.md" ] && has_ja="true"
                
                # Force retranslate„Åæ„Åü„ÅØÁøªË®≥„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅÆ„ÅøÂá¶ÁêÜ
                if [ "${{ inputs.force_retranslate }}" = "true" ] || [ "$has_en" = "false" ] || [ "$has_ja" = "false" ]; then
                  echo "${file}|${has_en}|${has_ja}" >> process_list.txt
                  echo "  - English translation exists: $has_en"
                  echo "  - Japanese translation exists: $has_ja"
                else
                  echo "  - Skipping (translations exist)"
                fi
              fi
            fi
          done
          
          # Âá¶ÁêÜÂØæË±°„Åå„ÅÇ„Çã„ÅãÁ¢∫Ë™ç
          if [ -s process_list.txt ] && grep -q "|" process_list.txt; then
            echo "has_files=true" >> $GITHUB_OUTPUT
          else
            echo "has_files=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No files to translate"
          fi

      # Step 2: Ë®ÄË™ûÂà§ÂÆö„Å®ÁøªË®≥ÂØæË±°„ÅÆÊ±∫ÂÆö
      - name: 'Step 2: Detect Language and Determine Targets'
        id: 'detect_language'
        if: steps.detect_files.outputs.has_files == 'true'
        run: |-
          echo "üåê Detecting languages..."
          echo "translation_tasks=" > tasks.json
          echo "[" >> tasks.json
          
          first=true
          while IFS='|' read -r file has_en has_ja; do
            if [ -n "$file" ] && [ "$file" != "files_to_process=" ]; then
              echo "Processing: $file"
              
              # „Éï„Ç°„Ç§„É´ÂÜÖÂÆπ„ÇíË™≠„ÅøËæº„Çì„ÅßË®ÄË™ûÂà§ÂÆö
              content=$(cat "$file")
              base_file="${file%.md}"
              
              # Êó•Êú¨Ë™û„ÅÆÊ§úÂá∫Ôºà„Å≤„Çâ„Åå„Å™„Éª„Ç´„Çø„Ç´„Éä„ÉªÊº¢Â≠óÔºâ
              if echo "$content" | grep -qE '[„ÅÅ-„Çì]|[„Ç°-„É¥]|[‰∏Ä-ÈæØ]'; then
                lang="ja"
                echo "  - Detected: Japanese"
                
                # Ëã±Ë®≥„ÅåÂøÖË¶Å„ÅãÁ¢∫Ë™ç
                if [ "$has_en" = "false" ] || [ "${{ inputs.force_retranslate }}" = "true" ]; then
                  [ "$first" = "false" ] && echo "," >> tasks.json
                  echo -n "  {\"source\": \"$file\", \"target\": \"${base_file}_en.md\", \"direction\": \"ja-en\"}" >> tasks.json
                  first=false
                fi
              else
                lang="en"
                echo "  - Detected: English"
                
                # ÂíåË®≥„ÅåÂøÖË¶Å„ÅãÁ¢∫Ë™ç
                if [ "$has_ja" = "false" ] || [ "${{ inputs.force_retranslate }}" = "true" ]; then
                  [ "$first" = "false" ] && echo "," >> tasks.json
                  echo -n "  {\"source\": \"$file\", \"target\": \"${base_file}_ja.md\", \"direction\": \"en-ja\"}" >> tasks.json
                  first=false
                fi
              fi
            fi
          done < process_list.txt
          
          echo "" >> tasks.json
          echo "]" >> tasks.json
          
          # „Çø„Çπ„ÇØ„Åå„ÅÇ„Çã„ÅãÁ¢∫Ë™ç
          task_count=$(cat tasks.json | jq '. | length')
          if [ "$task_count" -gt 0 ]; then
            echo "has_tasks=true" >> $GITHUB_OUTPUT
            echo "task_count=$task_count" >> $GITHUB_OUTPUT
            echo "üìã Found $task_count translation task(s)"
          else
            echo "has_tasks=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No translation tasks"
          fi

      # Step 3: ÁøªË®≥ÂÆüË°å
      - name: 'Step 3: Execute Translations'
        id: 'translate'
        if: steps.detect_language.outputs.has_tasks == 'true'
        uses: 'google-github-actions/run-gemini-cli@v0'
        env:
          TRANSLATION_TASKS: '${{ steps.detect_language.outputs.task_count }}'
        with:
          gemini_cli_version: 'latest'
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          gemini_model: 'gemini-1.5-flash'
          settings: |-
            {
              "coreTools": [
                "run_shell_command(cat)",
                "run_shell_command(echo)",
                "run_shell_command(jq)"
              ]
            }
          prompt: |-
            ## Task: Translate Markdown Files
            
            You are a professional translator. Your task is to translate markdown files based on the tasks in `tasks.json`.
            
            Instructions:
            1. Read the translation tasks: `cat tasks.json`
            2. For each task, read the source file: `cat [source_file]`
            3. Translate the content:
               - For ja-en: Translate Japanese to natural, technical English
               - For en-ja: Translate English to polite, technical Japanese
            4. Preserve all Markdown formatting, links, and code blocks
            5. Add `<!-- Generated by Gemini -->` as the first line
            6. Save each translation: `echo '[translated_content]' > [target_file]`
            
            Quality Standards:
            - Preserve all formatting and structure
            - Translate alt text in images
            - Keep code blocks unchanged (only translate comments)
            - Maintain professional, technical tone
            
            After completing all translations, create a summary file:
            `echo '[summary_json]' > translation_summary.json`
            
            The summary should be a JSON array of completed translations.

      # Step 4: ÁøªË®≥ÁµêÊûú„ÅÆÁ¢∫Ë™ç
      - name: 'Step 4: Verify Translations'
        id: 'verify'
        if: steps.translate.outcome == 'success'
        run: |-
          echo "‚úÖ Verifying translations..."
          
          # ÁøªË®≥„Åï„Çå„Åü„Éï„Ç°„Ç§„É´„ÇíÁ¢∫Ë™ç
          translated_files=""
          while read -r line; do
            target=$(echo "$line" | jq -r '.target')
            if [ -f "$target" ]; then
              echo "‚úì Found: $target"
              translated_files="${translated_files}${target}\n"
            else
              echo "‚úó Missing: $target"
            fi
          done < <(cat tasks.json | jq -c '.[]')
          
          # ÁøªË®≥„Åï„Çå„Åü„Éï„Ç°„Ç§„É´„Åå„ÅÇ„Çã„ÅãÁ¢∫Ë™ç
          if [ -n "$translated_files" ]; then
            echo "has_translations=true" >> $GITHUB_OUTPUT
            echo -e "$translated_files" > translated_files.txt
            
            # „Éñ„É©„É≥„ÉÅÂêç„ÇíÁîüÊàê
            timestamp=$(date +%Y%m%d-%H%M%S)
            echo "branch_name=translation/auto-${timestamp}" >> $GITHUB_OUTPUT
          else
            echo "has_translations=false" >> $GITHUB_OUTPUT
          fi

      # Step 5: PR‰ΩúÊàê
      - name: 'Step 5: Create Pull Request'
        if: steps.verify.outputs.has_translations == 'true'
        uses: 'google-github-actions/run-gemini-cli@v0'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          GITHUB_REPOSITORY: '${{ github.repository }}'
          BRANCH_NAME: '${{ steps.verify.outputs.branch_name }}'
        with:
          gemini_cli_version: 'latest'
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          gemini_model: 'gemini-1.5-flash'
          settings: |-
            {
              "mcpServers": {
                "github": {
                  "command": "docker",
                  "args": ["run", "-i", "--rm", "-e", "GITHUB_PERSONAL_ACCESS_TOKEN", "ghcr.io/github/github-mcp-server"],
                  "env": {
                    "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_TOKEN}"
                  },
                  "includeTools": [
                    "create_pull_request",
                    "create_branch",
                    "update_file"
                  ]
                }
              },
              "coreTools": [
                "run_shell_command(cat)",
                "run_shell_command(wc)"
              ]
            }
          prompt: |-
            ## Task: Create Pull Request
            
            Create a pull request with the translated files.
            
            Environment:
            - Repository: ${GITHUB_REPOSITORY}
            - Branch name: ${BRANCH_NAME}
            
            Steps:
            1. Parse repository: Split ${GITHUB_REPOSITORY} by "/" to get owner and repo
            2. Create branch: Use `create_branch` MCP tool with the branch name
            3. Read each translated file from `translated_files.txt` and commit using `update_file` MCP tool
            4. Create PR using `create_pull_request` MCP tool:
               - Title: "üåç Auto-translation: [N] files"
               - Base: main
               - Head: ${BRANCH_NAME}
               - Body: Include file list and checklist