name: 'Auto Translation'

on:
  push:
    paths:
      - 'docs/**/*.md'
      - 'README.md'
      - '*.md'
    branches:
      - 'main'
  workflow_dispatch:
    inputs:
      target_file:
        description: 'Target file for translation (if empty, auto-detect)'
        required: false
        type: string
      force_retranslate:
        description: 'Force update existing translation'
        required: false
        type: boolean
        default: false

concurrency:
  group: 'translation-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  translate:
    runs-on: 'ubuntu-latest'
    timeout-minutes: 10
    permissions:
      contents: 'write'
      pull-requests: 'write'
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4'
        with:
          fetch-depth: 2

      - name: 'Detect translation targets'
        id: 'detect_targets'
        run: |-
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.target_file }}" ]; then
            # Manual execution: specified file
            echo "files=${{ inputs.target_file }}" >> $GITHUB_OUTPUT
          else
            # Automatic execution: changed md files
            CHANGED_MD_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(md)$' | grep -E '^(docs|content|README)' || true)
            echo "files<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGED_MD_FILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: 'Run Smart Translation'
        if: steps.detect_targets.outputs.files != ''
        uses: 'google-github-actions/run-gemini-cli@v0'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          TARGET_FILES: '${{ steps.detect_targets.outputs.files }}'
          FORCE_RETRANSLATE: '${{ inputs.force_retranslate || false }}'
        with:
          gemini_cli_version: '${{ vars.GEMINI_CLI_VERSION }}'
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          settings: |-
            {
              "mcpServers": {
                "github": {
                  "command": "docker",
                  "args": ["run", "-i", "--rm", "-e", "GITHUB_PERSONAL_ACCESS_TOKEN", "ghcr.io/github/github-mcp-server"],
                  "includeTools": [
                    "create_pull_request",
                    "create_branch", 
                    "update_file",
                    "get_repository"
                  ],
                  "env": {
                    "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_TOKEN}"
                  }
                }
              },
              "coreTools": [
                "run_shell_command(cat)",
                "run_shell_command(find)",
                "run_shell_command(wc)",
                "run_shell_command(head)"
              ]
            }
          prompt: |-
            ## Role
            
            You are an expert in multilingual document translation. Automatically determine the language of Markdown files, create appropriate translations, and propose them in a Pull Request.
            
            ## Execution Steps
            
            ### 1. File Analysis
            ```bash
            # Check target files
            TARGET_FILES="${TARGET_FILES}"
            
            for file in $TARGET_FILES; do
              if [ -f "$file" ]; then
                echo "=== Analyzing: $file ==="
                
                # Get file content
                CONTENT=$(cat "$file")
                
                # Determine language and decide filename
                # Japanese detection: Presence of Hiragana, Katakana, and Japanese particles.
                # English detection: English grammar structure, frequency of common English words.
                
                if [[ "$CONTENT" =~ [„ÅÇ-„Çì] || "$CONTENT" =~ [„Ç¢-„É≥] ]]; then
                  DETECTED_LANG="japanese"
                  TARGET_FILE="${file%.*}_en.md"
                  TRANSLATION_DIRECTION="ja‚Üíen"
                elif [[ "$CONTENT" =~ ^[[:ascii:]]*$ ]] && [[ "$CONTENT" =~ (the|and|of|to|a|in|is|it|you|that|he|was|for|on|are|as|with|his|they|i|at|be|this|have|from|or|one|had|by|word|but|not|what|all|were|we|when|your|can|said|there|each|which|she|do|how|their|if|will|up|other|about|out|many|then|them|these|so|some|her|would|make|like|into|him|has|two|more|go|no|way|could|my|than|first|been|call|who|its|now|find|long|down|day|did|get|come|made|may|part) ]]; then
                  DETECTED_LANG="english"
                  TARGET_FILE="${file%.*}_ja.md"
                  TRANSLATION_DIRECTION="en‚Üíja"
                else
                  echo "Language detection failed for $file"
                  continue
                fi
                
                echo "Detected language: $DETECTED_LANG"
                echo "Target file: $TARGET_FILE"
                
                # Check for existing translation file
                if [ -f "$TARGET_FILE" ] && [ "${FORCE_RETRANSLATE}" != "true" ]; then
                  echo "Translation already exists: $TARGET_FILE (skipping)"
                  continue
                fi
                
                # Record as a translation target
                echo "$file|$TARGET_FILE|$DETECTED_LANG|$TRANSLATION_DIRECTION" >> translation_tasks.txt
              fi
            done
            ```
            
            ### 2. Execute Translation
            ```javascript
            // Load the translation tasks file
            const translationTasks = [];
            
            // Translate each file
            for (const task of tasks) {
              const [sourceFile, targetFile, sourceLang, direction] = task.split('|');
              
              // Get original file content
              const originalContent = await readFile(sourceFile);
              
              // Translate according to the language
              let translatedContent;
              if (sourceLang === 'japanese') {
                translatedContent = await translateToEnglish(originalContent);
              } else {
                translatedContent = await translateToJapanese(originalContent);
              }
              
              // Add Gemini header
              const finalContent = `<!-- Generated by Gemini -->\n\n${translatedContent}`;
              
              translationTasks.push({
                sourceFile,
                targetFile, 
                content: finalContent,
                direction
              });
            }
            
            // Create a translation PR
            if (translationTasks.length > 0) {
              await createTranslationPR(translationTasks);
            }
            ```
            
            ### 3. Create Translation PR
            ```javascript
            async function createTranslationPR(tasks) {
              // Create translation branch
              const timestamp = Date.now();
              const branchName = `translation/auto-${timestamp}`;
              
              await mcp__github__create_branch({
                "branch_name": branchName,
                "source_branch": "main"
              });
              
              // Create each translated file
              for (const task of tasks) {
                await mcp__github__update_file({
                  "path": task.targetFile,
                  "content": task.content,
                  "message": `Add ${task.direction} translation for ${task.sourceFile}`,
                  "branch": branchName
                });
              }
              
              // Create PR
              const prBody = `## üåç Automatic Translation PR
            
            This is a translation of new or updated documents.
            
            ### Translated Files
            ${tasks.map(t => `- \`${t.sourceFile}\` ‚Üí \`${t.targetFile}\` (${t.direction})`).join('\n')}
            
            ### Translation Quality Checklist
            - [ ] Accuracy of language detection
            - [ ] Appropriateness of technical terms
            - [ ] Naturalness of the sentences
            - [ ] Integrity of links and references
            - [ ] Preservation of code blocks
            - [ ] Translation of metadata
            
            *Automatically generated by Gemini. Please review the content before merging.*`;
              
              await mcp__github__create_pull_request({
                "title": `üåç Auto-translation: ${tasks.length} files translated`,
                "body": prBody,
                "head": branchName,
                "base": "main"
              });
            }
            ```
            
            ## Translation Quality Standards
            
            ### Japanese ‚Üí English
            - Natural and fluent English expressions
            - A formal writing style suitable for technical documents
            - Use of standard English technical terminology
            
            ### English ‚Üí Japanese
            - Easy-to-read, natural Japanese
            - Use a moderately polite tone
            - Where necessary, include English terms alongside the Japanese
            
            ### Common Rules
            - Front Matter is to be translated.
            - Code blocks must be preserved (only comments within them should be translated).
            - Links must be adjusted appropriately.
            - Image alt text should also be translated.
            
            Environment Variables:
            - TARGET_FILES: ${TARGET_FILES}
            - FORCE_RETRANSLATE: ${FORCE_RETRANSLATE}
