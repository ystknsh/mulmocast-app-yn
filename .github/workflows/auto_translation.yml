name: 'Auto Translation'

on:
  push:
    paths:
      - 'docs/**/*.md'
      - 'README.md'
      - '*.md'
    branches:
      - 'main'
  workflow_dispatch:
    inputs:
      target_file:
        description: 'Target file for translation (if empty, auto-detect)'
        required: false
        type: string
      force_retranslate:
        description: 'Force update existing translation'
        required: false
        type: boolean
        default: false

concurrency:
  group: 'translation-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  translate:
    runs-on: 'ubuntu-latest'
    timeout-minutes: 10
    permissions:
      contents: 'write'
      pull-requests: 'write'
      actions: 'write'
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4'
        with:
          fetch-depth: 2

      - name: 'Detect translation targets'
        id: 'detect_targets'
        run: |-
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.target_file }}" ]; then
            # Manual execution: specified file
            echo "files=${{ inputs.target_file }}" >> $GITHUB_OUTPUT
          else
            # Automatic execution: changed md files
            CHANGED_MD_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(md)$' | grep -E '^(docs|content|README)' || true)
            echo "files<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGED_MD_FILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: 'Run Smart Translation'
        if: steps.detect_targets.outputs.files != ''
        uses: 'google-github-actions/run-gemini-cli@v0'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          TARGET_FILES: '${{ steps.detect_targets.outputs.files }}'
          FORCE_RETRANSLATE: '${{ inputs.force_retranslate || false }}'
          GITHUB_REPOSITORY: '${{ github.repository }}'
          GITHUB_REPOSITORY_OWNER: '${{ github.repository_owner }}'
        with:
          gemini_cli_version: '${{ vars.GEMINI_CLI_VERSION }}'
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          gemini_debug: true  # デバッグモードを有効化
          settings: |-
            {
              "mcpServers": {
                "github": {
                  "command": "docker",
                  "args": ["run", "-i", "--rm", "-e", "GITHUB_PERSONAL_ACCESS_TOKEN", "ghcr.io/github/github-mcp-server"],
                  "env": {
                    "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                  },
                  "includeTools": [
                    "create_pull_request",
                    "create_branch", 
                    "update_file",
                    "get_repository",
                    "list_directory"
                  ]
                }
              },
              "coreTools": [
                "run_shell_command(cat)",
                "run_shell_command(ls)",
                "run_shell_command(echo)",
                "run_shell_command(test)",
                "run_shell_command(find)",
                "run_shell_command(wc)",
                "run_shell_command(head)"
              ]
            }
          prompt: |-
            ## Role
            You are an expert in multilingual document translation. Your task is to automatically determine the language of Markdown files, create appropriate translations, and propose these translations in a GitHub Pull Request.

            ## Environment Variables
            - `TARGET_FILES`: A list of files to be translated. Current value: `${TARGET_FILES}`
            - `FORCE_RETRANSLATE`: A boolean to force re-translation even if a translated file exists. Current value: `${FORCE_RETRANSLATE}`
            - `GITHUB_REPOSITORY`: The repository name in format owner/repo. Current value: `${GITHUB_REPOSITORY}`
            - `GITHUB_REPOSITORY_OWNER`: The repository owner. Current value: `${GITHUB_REPOSITORY_OWNER}`
            - The GitHub repository is available for you to interact with via the `mcp__github__` tools.

            ## Execution Plan
            You must follow these steps precisely. Do not skip any steps.

            ### Step 1: Analyze and Translate Files
            You will now iterate through each file path provided in the `TARGET_FILES` environment variable. For each file, perform the following actions:

            1.  **Read the file content:** Use the `run_shell_command` tool with `cat` to read the content of the file.
            2.  **Detect the language:** Analyze the content to determine if it is `japanese` or `english`.
                *   **Japanese Hint:** Contains hiragana (`[あ-ん]`) or katakana (`[ア-ン]`).
                *   **English Hint:** Consists of ASCII characters and common English words.
            3.  **Determine the target path:** Based on the detected language, define the path for the translated file.
                *   If Japanese, the target file should end with `_en.md`.
                *   If English, the target file should end with `_ja.md`.
            4.  **Check for existing translation (and skip if necessary):**
                *   If `FORCE_RETRANSLATE` is `false`, you must check if the target file already exists. You can use `run_shell_command` with `ls` for this.
                *   If the file exists and `FORCE_RETRANSLATE` is `false`, print a message that you are skipping the file and move to the next one.
            5.  **Translate the content:**
                *   Translate the original content into the target language, adhering to the "Translation Quality Standards" defined below.
                *   You must perform the translation yourself. Do not use a placeholder function.
                *   Ensure that code blocks, front matter, and Markdown formatting are preserved perfectly. Translate comments within code blocks and text in `alt` attributes.
            6.  **Add a header:** Prepend the following line to the beginning of the translated content: `<!-- Generated by Gemini -->`
            7.  **Store the result:** Keep the `sourceFile`, `targetFile` path, `content`, and `direction` (e.g., `ja→en`) for the next step.

            ### Step 2: Create the Pull Request
            After processing all the files, if you have generated one or more translations, you must create a single pull request containing all the changes.

            1.  **Create a new branch:** Call the MCP tool named `create_branch` (from the github MCP server) with:
                - Branch name: Use a timestamp like `translation/auto-20250912-150000` (use current time)
                - Get repository owner and name by splitting GITHUB_REPOSITORY environment variable at the slash
            2.  **Commit each translated file:** Call the MCP tool named `update_file` (from the github MCP server) with:
                - Path: The target file path from Step 1
                - Content: The full translated content with header
                - Message: A descriptive commit message
                - Branch: The branch name created in step 1
                - The owner and repo from GITHUB_REPOSITORY
            3.  **Create the pull request:** Call the MCP tool named `create_pull_request` (from the github MCP server) with:
                - Title: Auto-translation with number of files
                - Body: Include list of translated files and quality checklist
                - Base: main
                - Head: The branch from step 1

            ## Translation Quality Standards
            
            ### Japanese → English
            - Natural and fluent English expressions.
            - A formal writing style suitable for technical documents.
            - Use of standard English technical terminology.
            
            ### English → Japanese
            - Easy-to-read, natural Japanese.
            - Use a moderately polite tone.
            - Where necessary, include English terms alongside the Japanese.
            
            ### Common Rules
            - Front Matter is to be translated.
            - Code blocks must be preserved (only comments within them should be translated).
            - Links must be adjusted appropriately.
            - Image alt text should also be translated.
