name: 'Auto Translation'

on:
  push:
    paths:
      - 'docs/**/*.md'
      - 'README.md'
      - '*.md'
    branches:
      - 'main'
  workflow_dispatch:
    inputs:
      target_file:
        description: 'Target file for translation (if empty, auto-detect)'
        required: false
        type: string
      force_retranslate:
        description: 'Force update existing translation'
        required: false
        type: boolean
        default: false

concurrency:
  group: 'translation-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  translate:
    runs-on: 'ubuntu-latest'
    timeout-minutes: 10
    permissions:
      contents: 'write'
      pull-requests: 'write'
      actions: 'write'
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4'
        with:
          fetch-depth: 2

      # Step 1: ファイルの検出と既存翻訳のチェック
      - name: 'Step 1: Detect Files and Check Existing Translations'
        id: 'detect_files'
        run: |-
          echo "🔍 Detecting target files..."
          
          # ターゲットファイルの検出
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ inputs.target_file }}" ]; then
              # 特定ファイルが指定された場合
              TARGET_FILES="${{ inputs.target_file }}"
            else
              # 手動実行で指定なしの場合、すべてのMDファイルをチェック
              TARGET_FILES=$(find docs -name "*.md" -type f | grep -v "_en.md" | grep -v "_ja.md" || true)
              if [ -z "$TARGET_FILES" ]; then
                TARGET_FILES=$(find . -maxdepth 1 -name "*.md" -type f | grep -v "_en.md" | grep -v "_ja.md" || true)
              fi
            fi
          else
            # Push時は変更されたファイルのみ
            TARGET_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(md)$' | grep -E '^(docs|content|README)' || true)
          fi
          
          echo "📋 Target files: $TARGET_FILES"
          
          # 処理対象ファイルのリスト作成
          > process_list.txt  # 空ファイルを作成

          # push イベントでは変更がある前提。手動実行は unknown。
          if [ "${{ github.event_name }}" = "push" ]; then
            CHANGED_FLAG="true"
          else
            CHANGED_FLAG="unknown"
          fi

          for file in $TARGET_FILES; do
            if [ -f "$file" ]; then
              echo "📂 Processing: $file"
              
              # ファイル名から拡張子を除去してベース名を取得
              base_file="${file%.md}"
              
              echo "  Base file: $base_file"
              
              # 翻訳サフィックスがついていないかチェック
              if [[ "$file" != *"_en.md" ]] && [[ "$file" != *"_ja.md" ]]; then
                echo "✅ Found source file: $file"
                
                # 既存翻訳のチェック
                has_en="false"
                has_ja="false"
                [ -f "${base_file}_en.md" ] && has_en="true"
                [ -f "${base_file}_ja.md" ] && has_ja="true"
                
                echo "  - English translation exists: $has_en"
                echo "  - Japanese translation exists: $has_ja"
                echo "  - Force retranslate: ${{ inputs.force_retranslate }}"
                echo "  - Changed (source): $CHANGED_FLAG"

                # ポリシー適用
                # - 翻訳先ファイルがなければ全て翻訳
                # - 翻訳先ファイルがある → pushで変更ありなら update 対象
                if [ "${{ inputs.force_retranslate }}" = "true" ]; then
                  echo "${file}|${has_en}|${has_ja}|$CHANGED_FLAG" >> process_list.txt
                  echo "  ✅ Added (force)"
                else
                  if [ "$has_en" = "false" ] || [ "$has_ja" = "false" ]; then
                    echo "${file}|${has_en}|${has_ja}|$CHANGED_FLAG" >> process_list.txt
                    echo "  ✅ Added (missing target)"
                  else
                    if [ "$CHANGED_FLAG" = "true" ]; then
                      echo "${file}|${has_en}|${has_ja}|$CHANGED_FLAG" >> process_list.txt
                      echo "  ✅ Added (update existing translations)"
                    else
                      echo "  ⏭️ Skipping (translations exist and no change detected)"
                    fi
                  fi
                fi
              else
                echo "  ⏭️ Skipping (already translated file)"
              fi
            else
              echo "❌ File not found: $file"
            fi
          done
          
          # デバッグ: process_list.txtの内容を表示
          echo "📋 Processing list contents:"
          cat process_list.txt || echo "Empty file"
          
          # 処理対象があるか確認
          if [ -s process_list.txt ]; then
            echo "has_files=true" >> $GITHUB_OUTPUT
            echo "✅ Files to process found"
          else
            echo "has_files=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No files to translate"
          fi

      # Step 2: 言語判定と翻訳対象の決定
      - name: 'Step 2: Detect Language and Determine Targets'
        id: 'detect_language'
        if: steps.detect_files.outputs.has_files == 'true'
        run: |-
          echo "🌐 Detecting languages..."
          
          # JSON配列を作成
          echo "[" > tasks.json
          
          first=true
          while IFS='|' read -r file has_en has_ja changed; do
            if [ -n "$file" ]; then
              echo "Processing: $file"
              
              # ファイル内容を読み込んで言語判定
              content=$(cat "$file")
              base_file="${file%.md}"
              
              # 日本語の検出（簡易版）- 日本語文字を含むかチェック
              if echo "$content" | grep -q "は\|を\|に\|の\|が\|で\|と\|ます\|です"; then
                lang="ja"
                echo "  - Detected: Japanese"
                
                # 英訳: full or update or skip
                if [ "${{ inputs.force_retranslate }}" = "true" ] || [ "$has_en" = "false" ]; then
                  mode="full"
                else
                  if [ "$changed" = "true" ]; then mode="update"; else mode="skip"; fi
                fi
                if [ "$mode" != "skip" ]; then
                  [ "$first" = "false" ] && echo "," >> tasks.json
                  echo -n "  {\"source\": \"$file\", \"target\": \"${base_file}_en.md\", \"direction\": \"ja-en\", \"mode\": \"$mode\"}" >> tasks.json
                  first=false
                  echo "  ✅ Added task ($mode): $file → ${base_file}_en.md"
                fi
              else
                lang="en"
                echo "  - Detected: English"
                
                # 和訳: full or update or skip
                if [ "${{ inputs.force_retranslate }}" = "true" ] || [ "$has_ja" = "false" ]; then
                  mode="full"
                else
                  if [ "$changed" = "true" ]; then mode="update"; else mode="skip"; fi
                fi
                if [ "$mode" != "skip" ]; then
                  [ "$first" = "false" ] && echo "," >> tasks.json
                  echo -n "  {\"source\": \"$file\", \"target\": \"${base_file}_ja.md\", \"direction\": \"en-ja\", \"mode\": \"$mode\"}" >> tasks.json
                  first=false
                  echo "  ✅ Added task ($mode): $file → ${base_file}_ja.md"
                fi
              fi
            fi
          done < process_list.txt
          
          echo "" >> tasks.json
          echo "]" >> tasks.json
          
          # デバッグ: JSONファイルの内容を確認
          echo "📋 Generated tasks.json:"
          cat tasks.json
          
          # タスクがあるか確認
          if [ -s tasks.json ] && [ "$(cat tasks.json)" != "[]" ]; then
            task_count=$(cat tasks.json | jq '. | length' 2>/dev/null || echo "0")
            if [ "$task_count" -gt 0 ]; then
              echo "has_tasks=true" >> $GITHUB_OUTPUT
              echo "task_count=$task_count" >> $GITHUB_OUTPUT
              echo "📋 Found $task_count translation task(s)"
            else
              echo "has_tasks=false" >> $GITHUB_OUTPUT
              echo "ℹ️ No translation tasks (empty array)"
            fi
          else
            echo "has_tasks=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No translation tasks (no file or empty)"
          fi

      # Step 3: 翻訳実行
      - name: 'Step 3: Execute Translations'
        id: 'translate'
        if: steps.detect_language.outputs.has_tasks == 'true'
        shell: bash
        run: |-
          echo "🔄 Starting translations..."
          
          # タスクを1つずつ処理
          while read -r task; do
            if [ -n "$task" ] && [ "$task" != "[]" ] && [ "$task" != "[" ] && [ "$task" != "]" ]; then
              # JSONから情報を抽出
              source_file=$(echo "$task" | jq -r '.source' 2>/dev/null || echo "")
              target_file=$(echo "$task" | jq -r '.target' 2>/dev/null || echo "")
              direction=$(echo "$task" | jq -r '.direction' 2>/dev/null || echo "")
              mode=$(echo "$task" | jq -r '.mode' 2>/dev/null || echo "full")
              
              if [ -n "$source_file" ] && [ -f "$source_file" ]; then
                echo "📝 Translating: $source_file → $target_file ($direction, $mode)"

                if [ "$mode" = "full" ] || [ ! -f "$target_file" ]; then
                  # Geminiで翻訳実行（全体翻訳）
                  if [ "$direction" = "ja-en" ]; then
                    translation_prompt="Translate this Japanese markdown to natural, professional English. Preserve all formatting, links, and structure. Only translate the text content, not code blocks or URLs. Output the complete translated file."
                  else
                    translation_prompt="Translate this English markdown to polite, professional Japanese. Preserve all formatting, links, and structure. Only translate the text content, not code blocks or URLs. Output the complete translated file."
                  fi

                  {
                    echo "<!-- Generated by Gemini (full) -->"
                    echo ""
                    GEMINI_API_KEY='${{ secrets.GEMINI_API_KEY }}' \
                      npx -y @google/gemini-cli -m gemini-1.5-flash "$translation_prompt" < "$source_file"
                  } > "$target_file"

                  if [ -f "$target_file" ]; then
                    echo "  ✅ Created/Overwritten: $target_file"
                  else
                    echo "  ❌ Failed to create: $target_file"
                  fi
                else
                  # 既存翻訳を diff のみ反映
                  src_diff=$(git diff --unified=0 HEAD~1 HEAD -- "$source_file" || true)

                  update_prompt=$'You are updating an existing human-readable translation file.\n\nTask:\n- Given the current source markdown, its unified diff (last commit), and the current target translation markdown, apply ONLY the changes implied by the source diff to the target translation.\n- Preserve existing target phrasing and formatting where the source did not change.\n- Keep code blocks, URLs, and front-matter untouched and in the same places.\n- Output ONLY the complete updated target file content, no extra commentary.'

                  {
                    echo "<!-- Updated by Gemini (diff-based) -->"
                    echo ""
                    echo "[SOURCE FILE BEGIN]"
                    cat "$source_file"
                    echo "\n[SOURCE FILE END]"
                    echo "\n[SOURCE DIFF BEGIN]"
                    echo "$src_diff"
                    echo "[SOURCE DIFF END]"
                    echo "\n[CURRENT TARGET BEGIN]"
                    cat "$target_file"
                    echo "\n[CURRENT TARGET END]"
                  } | GEMINI_API_KEY='${{ secrets.GEMINI_API_KEY }}' npx -y @google/gemini-cli -m gemini-1.5-flash "$update_prompt" > "${target_file}.updated"

                  if [ -s "${target_file}.updated" ]; then
                    if ! diff -q "$target_file" "${target_file}.updated" >/dev/null 2>&1; then
                      mv "${target_file}.updated" "$target_file"
                      echo "  ✅ Updated: $target_file"
                    else
                      rm -f "${target_file}.updated"
                      echo "  ⏭️ No changes needed for: $target_file"
                    fi
                  else
                    echo "  ❌ Failed to generate updated content for: $target_file"
                    rm -f "${target_file}.updated" || true
                  fi
                fi
              fi
            fi
          done < <(cat tasks.json | jq -c '.[]' 2>/dev/null || echo "")

      # Step 4: 翻訳結果の確認
      - name: 'Step 4: Verify Translations'
        id: 'verify'
        if: steps.translate.outcome == 'success'
        run: |-
          echo "✅ Verifying translations..."
          
          # 翻訳されたファイルを確認
          translated_files=""
          while read -r line; do
            target=$(echo "$line" | jq -r '.target')
            if [ -f "$target" ]; then
              echo "✓ Found: $target"
              translated_files="${translated_files}${target}\n"
            else
              echo "✗ Missing: $target"
            fi
          done < <(cat tasks.json | jq -c '.[]')
          
          # 翻訳されたファイルがあるか確認
          if [ -n "$translated_files" ]; then
            echo "has_translations=true" >> $GITHUB_OUTPUT
            echo -e "$translated_files" > translated_files.txt
            
            # ブランチ名を生成
            timestamp=$(date +%Y%m%d-%H%M%S)
            echo "branch_name=translation/auto-${timestamp}" >> $GITHUB_OUTPUT
          else
            echo "has_translations=false" >> $GITHUB_OUTPUT
          fi

      # Step 5: PR作成
      - name: 'Step 5: Create Pull Request'
        if: steps.verify.outputs.has_translations == 'true'
        uses: 'google-github-actions/run-gemini-cli@v0'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          GITHUB_REPOSITORY: '${{ github.repository }}'
          BRANCH_NAME: '${{ steps.verify.outputs.branch_name }}'
        with:
          gemini_cli_version: 'latest'
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          gemini_model: 'gemini-1.5-flash'
          settings: |-
            {
              "mcpServers": {
                "github": {
                  "command": "docker",
                  "args": ["run", "-i", "--rm", "-e", "GITHUB_PERSONAL_ACCESS_TOKEN", "ghcr.io/github/github-mcp-server"],
                  "env": {
                    "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_TOKEN}"
                  },
                  "includeTools": [
                    "create_pull_request",
                    "create_branch",
                    "update_file"
                  ]
                }
              },
              "coreTools": [
                "run_shell_command(cat)",
                "run_shell_command(wc)"
              ]
            }
          prompt: |-
            ## Task: Create Pull Request
            
            Create a pull request with the translated files.
            
            Environment:
            - Repository: ${GITHUB_REPOSITORY}
            - Branch name: ${BRANCH_NAME}
            
            Steps:
            1. Parse repository: Split ${GITHUB_REPOSITORY} by "/" to get owner and repo
            2. Create branch: Use `create_branch` MCP tool with the branch name
            3. Read each translated file from `translated_files.txt` and commit using `update_file` MCP tool
            4. Create PR using `create_pull_request` MCP tool:
               - Title: "🌍 Auto-translation: [N] files"
               - Base: main
               - Head: ${BRANCH_NAME}
               - Body: Include file list and checklist
